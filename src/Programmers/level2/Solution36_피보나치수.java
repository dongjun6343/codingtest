package Programmers.level2;


/**
 *[피보나치 수]
 *
 * 문제 설명
 * 피보나치 수는 F(0) = 0, F(1) = 1일 때,
 * 1 이상의 n에 대하여 F(n) = F(n-1) + F(n-2) 가 적용되는 수 입니다.
 *
 * 예를들어
 *
 * F(2) = F(0) + F(1) = 0 + 1 = 1
 * F(3) = F(1) + F(2) = 1 + 1 = 2
 * F(4) = F(2) + F(3) = 1 + 2 = 3
 * F(5) = F(3) + F(4) = 2 + 3 = 5
 * 와 같이 이어집니다.
 *
 * 2 이상의 n이 입력되었을 때, n번째 피보나치 수를 1234567으로 나눈 나머지를 리턴하는 함수, solution을 완성해 주세요.
 *
 * 제한 사항
 * n은 2 이상 100,000 이하인 자연수입니다.
 *
 * 입출력 예
 * n	return
 * 3	  2
 * 5	  5
 *
 * 입출력 예 설명
 * 피보나치수는 0번째부터 0, 1, 1, 2, 3, 5, ... 와 같이 이어집니다.
 *
 */
class Solution36_피보나치수 {

    public static void main(String[] args) {
        Solution36_피보나치수 s = new Solution36_피보나치수();
        System.out.println(s.solution(5));
    }

    public int solution(int n) {
        int answer = 0;
        
        // 0,1,1,2,3,5
        // 0 1 2 3 4 5..번째

        // F(0) = 0, F(1) = 1 일때, n은 2이상.
        // F(n) = F(n-1) + F(n-2)
        // f2 = f1 + f0 = 1
        int[] a = new int[n+1];
        a[0] = 0;
        a[1] = 1;
        // i = 2, 3
        for(int i = 2; i < n+1; i++){
            a[i] = (a[i-1] % 1234567 + a[i-2] % 1234567) % 1234567;
        }
        answer = a[n]%1234567;
        return answer;
    }
}

/**
 *  7~14 테스트케이스에서 오류가 난 이유 : int형의 범위를 넘어서서 오류가 발생함.
 *
 *  (A + B) % C ≡ ( ( A % C ) + ( B % C) ) % C라는 성질을 이용해서
 *  매번 계산 결과에 1234567으로 나눈 나머지를 대신 넣는 것으로 int 범위 내에 항상 값이 존재함을 보장할 수 있다.
 *
 *  [핵심]
 *  F(N) % 1234567 = ( F(N-1) % 1234567 + F(N-2) % 1234567 ) % 1234567
 */