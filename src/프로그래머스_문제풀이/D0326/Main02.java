package 프로그래머스_문제풀이.D0326;

//멀리 뛰기
//문제 설명
//효진이는 멀리 뛰기를 연습하고 있습니다. 효진이는 한번에 1칸, 또는 2칸을 뛸 수 있습니다.
// 칸이 총 4개 있을 때, 효진이는
//(1칸, 1칸, 1칸, 1칸)
//(1칸, 2칸, 1칸)
//(1칸, 1칸, 2칸)
//(2칸, 1칸, 1칸)
//(2칸, 2칸)
// 의 5가지 방법으로 맨 끝 칸에 도달할 수 있습니다. 멀리뛰기에 사용될 칸의 수 n이 주어질 때,
// 효진이가 끝에 도달하는 방법이 몇 가지인지 알아내, 여기에 1234567를 나눈 나머지를 리턴하는 함수, solution을 완성하세요.
// 예를 들어 4가 입력된다면, 5를 return하면 됩니다.
//
//제한 사항
//n은 1 이상, 2000 이하인 정수입니다.
//입출력 예
//n	result
//4	5
//3	3
//입출력 예 설명
//입출력 예 #1
//위에서 설명한 내용과 같습니다.
//
//입출력 예 #2
//(2칸, 1칸)
//(1칸, 2칸)
//(1칸, 1칸, 1칸)
//총 3가지 방법으로 멀리 뛸 수 있습니다.
public class Main02 {
    public static void main(String[] args) {
        Main02 s = new Main02();
        System.out.println(s.solution(4));
    }

    // 4일때 5
    // 1 1 1 1
    // 1 1 2
    // 1 2 1
    // 2 1 1
    // 2 2

    // 5일때 8
    // 1 1 1 1 1
    // 1 1 1 2
    // 1 1 2 1
    // 1 2 1 1
    // 2 1 1 1
    // 2 2 1
    // 2 1 2
    // 1 2 2


    // DP
    // dp[i] = dp[i - 1] + dp[i - 2] - 점화식 (피보나치 느낌)
    // [0, 1, 2, 3, 5] -> dp[4]의 값은 5
    public long solution(int n) {
        long[] dp = new long[n+1];

        // 런타임 에러발생하므로 1일때 리턴시킨다.
        if(n == 1) {
            return 1;
        }

        dp[1] = 1;
        dp[2] = 2;

        for(int i = 3; i <= n; i++) {
            dp[i] = (dp[i-1] + dp[i-2]) % 1234567;
        }

        return dp[n];
    }
}

